%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: TC

file_extensions:
  - tc
scope: source.tc

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: keywords
    - include: numbers
    - include: strings
    - include: labels
    - include: vars

  labels:
    # Label the labels have brackets around
    - match: '\[.*\]'
      scope: constant.character.tc


  keywords:
    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(if|else|for|while|IF|ELSE|FOR|WHILE)\b'
      scope: keyword.control.tc

    - match: '\<\-'
      scope: keyword.control.tc

    - match: '\='
      scope: keyword.control.tc

    - match: '\!\='
      scope: keyword.control.tc

    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.tc

    - match: 'goto|GOTO'
      scope: constant.numeric.tc
      push: after_goto


  ## After the goto keyword a label becomes
  after_goto:
      - match: '\s(\w+)'
        scope: constant.character.tc
        pop: true

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character.
    - match: '"'
      scope: punctuation.definition.string.begin.tc
      push: inside_string

  inside_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.tc
    - match: '\.'
      scope: constant.character.escape.tc
    - match: '"'
      scope: punctuation.definition.string.end.tc
      pop: true

  comments:
    # Comments begin with a '//' and finish at the end of the line.
    - match: '//'
      scope: punctuation.definition.comment.tc
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.double-slash.tc
        - match: $\n?
          pop: true
  vars:
    - match: '\b[A-Z]\b|\b[A-Z][1-9]+?\b'
      scope: variable.parameter.tc

